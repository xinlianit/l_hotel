define(function(require, exports ,module){
	$.extend({
		/**
		 * 常用公共库
		 */
		common: {
				/**
				 * 获取系统当前时间
				 * @author Create By JiRY
				 * @param string dateFlag		日期分隔符
				 * @param string timeFlag		时间分隔符
				 * @return string
				 * */
				getNowDateTime:function(dateFlag, timeFlag){
					dateFlag = dateFlag ? dateFlag : '-';
					timeFlag = timeFlag ?　timeFlag : ':';
				    var date = new Date();
				    var seperator1 = dateFlag;
				    var seperator2 = timeFlag;
				    var month = date.getMonth() + 1;
				    var strDate = date.getDate();
				    var hours = date.getHours();
				    var minu = date.getMinutes();
				    var seconds = date.getSeconds();
				    	
				    if (month >= 1 && month <= 9) {
				        month = "0" + month;
				    }
				    if (strDate >= 0 && strDate <= 9) {
				        strDate = "0" + strDate;
				    }
				    if( hours < 10 ){
				    	hours = '0' + hours;
				    }
				    if( minu < 10 ){
				    	minu = '0' + minu;
				    }
				    if( seconds < 10 ){
				    	seconds = '0' + seconds;
				    }
				    var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate
				            + " " + hours + seperator2 + minu
				            + seperator2 + seconds;
				    return currentdate;
				},
				
				/**
				 * 打开窗口
				 * @param string params.id					弹框ID
				 * @param boolean params.resizable			重置大小
				 * @param boolean params.modal				背景遮罩
				 * @param string params.title				弹框标题；html|text,为html时，需配合title_html使用
				 * @param boolean params.title_html			标题是否支持html
				 * @param boolean params.enable_confirm		是否启用确定按钮
				 * @param boolean params.enable_cancel		是否启用取消按钮
				 * @param string params.confirm_icon		确定按钮图标
				 * @param string params.confirm_class		确认按钮样式
				 * @param string params.confirm_title		确认按钮标题
				 * @param function params.confirm_function	确认按钮回调函数
				 * @param string params.cancel_icon			取消按钮图标
				 * @param string params.cancel_class		取消按钮样式
				 * @param string params.cancel_title		取消按钮标题
				 * @param function params.cancel_function	取消按钮回调函数
				 * */
				openWindow: function(params){
					var params = $.common.typeCheck(params , 'undefined' , {});
					var btn = [];
					
					var confirm_icon 		= $.common.typeCheck(params.confirm_icon , 'undefined' , 'icon-ok bigger-110');
					var confirm_title 		= $.common.typeCheck(params.confirm_title , 'undefined' , '确定');
					var confirm_class 		= $.common.typeCheck(params.confirm_class , 'undefined' , 'btn btn-danger btn-xs');
					var confirm_function 	= $.common.typeCheck(params.confirm_function , 'undefined' , function(){
						$( this ).dialog( "close" );
					});
					
					var cancel_icon 		= $.common.typeCheck(params.cancel_icon , 'undefined' , 'icon-remove bigger-110');
					var cancel_title 		= $.common.typeCheck(params.cancel_title , 'undefined' , '取消');
					var cancel_class 		= $.common.typeCheck(params.cancel_class , 'undefined' , 'btn btn-xs');
					var cancel_function 	= $.common.typeCheck(params.cancel_function , 'undefined' , function(){
						$( this ).dialog( "close" );
					});
					
					//确认按钮
					var enable_confirm 		= $.common.typeCheck(params.enable_confirm , 'undefined' , true);
					
					if( enable_confirm ){
						var confirm_btn = {
								"html": "<i class='"+confirm_icon+"'></i>&nbsp; "+confirm_title,
								"class" : confirm_class,
								"click": confirm_function
						};
						btn[0] = confirm_btn;
					}
					
					//取消按钮
					var enable_cancel = $.common.typeCheck(params.enable_cancel , 'undefined' , true);
					
					if( enable_cancel ){
						var cancel_btn = {
								"html": "<i class='"+cancel_icon+"'></i>&nbsp; "+cancel_title,
								"class" : cancel_class,
								"click": cancel_function
						};
						btn[1] = cancel_btn;
					}
					
					//dialog 设置
					var dialog_id = $.common.typeCheck(params.id , 'undefined' , false);
					if( dialog_id ){
						
						var dialog_params = {
							resizable: $.common.typeCheck(params.resizable , 'undefined' , false),
							modal: $.common.typeCheck(params.modal , 'undefined' , true),
							title: $.common.typeCheck(params.title , 'undefined' , '温馨提示'),
							title_html: $.common.typeCheck(params.title_html , 'undefined' , true),
							buttons: btn
						};
						
						if( $.common.typeCheck(params.height , 'undefined' , null) !== null ){
							dialog_params.height = params.height;
						}
						
						if( $.common.typeCheck(params.width , 'undefined' , null) !== null ){
							dialog_params.width = params.width;
						}
						
						$(document).find( '[dialog-id="'+dialog_id+'"]' ).removeClass('hide').dialog(dialog_params);
					}
					
				},
				
				/**
				 * 表单ajax提交
				 * @param string submit_params.id				表单ID
				 * @param string submit_params.type				提交类型
				 * @param string submit_params.url				提交地址
				 * @param boolean submit_params.cache			ajax缓存
				 * @param int submit_params.timeout				超时时间；单位：毫秒：如 3秒 = 30000毫秒 
				 * @param boolean submit_params.async			异步提交
				 * @param string submit_params.contentType		提交内容类型
				 * @param string submit_params.dataType			预期返回数据格式
				 * @param function submit_params.beforeSend		提交前回调函数
				 * @param function submit_params.complete		提交完成回调函数
				 * @param function submit_params.success		提交成功回调函数
				 * @param function submit_params.error			提交出错回调函数
				 */
				ajaxFormSubmit: function(submit_params){
					//提交参数
					var submit_params = $.common.typeCheck(submit_params, 'undefined', {});
					
					//表单对象
					var form = $(document).find('[form-id="'+submit_params.id+'"]');
					
					//提交类型
					var type = $.common.typeCheck(form.attr('method') , 'undefined' , 'GET');

					//ajax参数
					var ajaxParam = {
							type: $.common.typeCheck(submit_params.type , 'undefined' , $.common.typeCheck(form.attr('method') , 'undefined' , 'GET')),
							url: $.common.typeCheck(submit_params.url , 'undefined' , $.common.typeCheck(form.attr('action') , 'undefined' , '')),
							cache: $.common.typeCheck(submit_params.cache , 'undefined' , true),
							timeout: $.common.typeCheck(submit_params.timeout , 'undefined' , 30000),
							async: $.common.typeCheck(submit_params.async , 'undefined' , true),
							dataType: $.common.typeCheck(submit_params.dataType , 'undefined' , 'JSON'),
							contentType: $.common.typeCheck(submit_params.contentType , 'undefined' , 'application/x-www-form-urlencoded'),
							beforeSend: $.common.typeCheck(submit_params.beforeSend , 'undefined' , function(XMLHttpRequest){
								$.common.beforeSend(XMLHttpRequest);
							}),
							complete: $.common.typeCheck(submit_params.complete, 'undefined', function(XMLHttpRequest, textStatus){
								$.common.complete(XMLHttpRequest, textStatus);
							}),
							success: $.common.typeCheck(submit_params.success , 'undefined' , function(data, textStatus){
								$.common.success(data, textStatus, form);
							}),
							error: $.common.typeCheck(submit_params.error , 'undefined', function(XMLHttpRequest, textStatus, errorThrown){
								$.common.error(XMLHttpRequest, textStatus, errorThrown);
							}),
							data: form.serializeArray()
						};
					
					//表单数据处理
					var data = {};
					$.each(ajaxParam.data,function(i,item){
						if(typeof(data[item.name]) == 'undefined'){
							data[item.name] = item.value;
							
						}else if(typeof(data[item.name]) == 'string'){
							
							var arr = new Array();
							arr.push(data[item.name]);
							arr.push(item.value);
							
							data[item.name] = arr;
						}else if(typeof(data[item.name]) == 'object'){
							data[item.name].push(item.value);
						}
					});
					
					//替换提交数据
					ajaxParam.data = data;
					
					//执行ajax提交
					$.ajax(ajaxParam);
					
					return false;
				},
				
				/**
				 * 数据类型检测
				 * @author JiRY
				 * @param all data   						数据源
				 * @param string|object|boolean type 		类型
				 * @param all default_value					默认值
				 * @return string|object|boolean
				 */
				typeCheck: function(data, type, default_value){
					return typeof(data) == type ? default_value : data;
				},
				
				/**
				 * 发送请求前
				 * @param object XMLHttpRequest  响应对象
				 */
				beforeSend: function(XMLHttpRequest){
					//提示框
					$.common.openTips({
						'message': "请稍后，数据正在处理中..."
					});
				},
				
				/**
				 * 请求完成时
				 * @param object XMLHttpRequest	响应对象
				 * @param string textStatus		响应状态
				 */
				complete: function(XMLHttpRequest, textStatus){
					
				},
				
				/**
				 * 请求成功
				 * @param string|object|boolean data	服务器返回数据
				 * @param string testStatus				响应状态
				 */
				success: function(data, textStatus , form){
					if( typeof(data) == 'object' ){
						if( typeof(data.status) != 'undefined' && parseInt(data.status) == 1){
							
							//提示框
							$.common.openTips({
								'icon': 'icon-ok bigger-110',
								'message': data.msg
							});
							
							//倒计时
							var timeout = 3;
							setInterval(function(){
								timeout--;
								$(document).find('[tag-id="timeout"]').html(timeout+" ");
							},1000);
							
							//跳转或刷新
							if( typeof(form.attr('redirect')) != 'undefined' ){
								//3秒后关闭提示并重定向
								setTimeout(function(){
									//跳转
									window.location.href = form.attr('redirect');
								},3000);
							}else{
								//3秒钟后关闭提示，且刷新
								setTimeout(function(){
									//刷新
									window.location.reload();
								},3000);
							}
						}else{
							//提示框
							$.common.openTips({
								'icon': 'icon-ok bigger-110',
								'message': JSON.stringify(data)
							});
						}
					}else if( typeof(data) == 'string' ){
						
					}else if( typeof(data) == 'boolean' ){
						
					}
				},
				
				/**
				 * 请求失败
				 * @param object XMLHttpRequest		响应对象
				 * @param string textStatus			响应状态
				 * @param string errorThrown		错误信息
				 */
				error: function(XMLHttpRequest, textStatus, errorThrown){
					console.error(errorThrown);
					var errorMsg = '';
					switch( textStatus ){
						case 'error':
							errorMsg = '服务器发送错误，请重试！';
							break;
						case 'parsererror':
							errorMsg = '服务器数据解析错误，请重试！';
							break;
					}
					
					$.common.openWindow({content:errorMsg});
				},
				
				/**
				 * 打开提示弹框
				 * @param string params.className		提示框类名
				 * @param string param.message			提示内容
				 * @param boolean param.backdrop		是否遮罩
				 * @param string param.icon				提示图标
				 */
				openTips: function(params){
					
					var params 			= $.common.typeCheck(params, 'undefined', {});
					
					var className 		= $.common.typeCheck(params.className, 'undefined', 'loading-in');
					
					var message 		= $.common.typeCheck(params.message, 'undefined', '操作成功！<span tag-id="timeout">3 </span>秒后正在刷新或跳转...');
					
					var icon 			= $.common.typeCheck(params.icon, 'undefined', 'icon-spinner icon-spin');
					
					//关闭加载框
					if($(document).find('.'+className).attr('class') != 'undefined'){
						$(document).find('.'+className).find('.bootbox-close-button').click();
					}
					
					//提示
					bootbox.dialog({ 
						className: className,
						backdrop: $.common.typeCheck(params.backdrop, 'undefined', true),
						message: '<div class="text-center" style="font-size:14px;"><i class="'+icon+'"></i> '+message+'</div>' 
					});
				},
				
				//成员方法...
				
			}
	});
});



